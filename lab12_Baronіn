#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int productOfIndexSums(const vector<vector<int>>& matrix) {
    int n = matrix.size();
    if (n == 0) return 0;

    pair<int, pair<int, int>> max1 = {INT_MIN, {0, 0}};
    pair<int, pair<int, int>> max2 = {INT_MIN, {0, 0}};

    for (int i = 0; i < n; ++i) {
        int val = matrix[i][n - 1 - i];
        if (val > max1.first) {
            max2 = max1;
            max1 = {val, {i, n - 1 - i}};
        } else if (val > max2.first) {
            max2 = {val, {i, n - 1 - i}};
        }
    }

    int sum1 = max1.second.first + max1.second.second;
    int sum2 = max2.second.first + max2.second.second;

    return sum1 * sum2;
}

void sortLastColumnDescending(vector<vector<int>>& matrix) {
    int n = matrix.size();
    if (n == 0) return;

    vector<pair<int, vector<int>>> rowsWithKeys;

    for (int i = 0; i < n; ++i) {
        rowsWithKeys.push_back({matrix[i].back(), matrix[i]});
    }

    sort(rowsWithKeys.rbegin(), rowsWithKeys.rend());

    for (int i = 0; i < n; ++i) {
        matrix[i] = rowsWithKeys[i].second;
    }
}

void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> matrix = {
        {4, 2, 3},
        {9, 5, 6},
        {7, 8, 1}
    };

    cout << "Original matrix:\n";
    printMatrix(matrix);

    int result = productOfIndexSums(matrix);
    cout << "\nProduct of sum of indices of two max elements on secondary diagonal: " << result << endl;

    sortLastColumnDescending(matrix);
    cout << "\nMatrix after sorting last column in descending order:\n";
    printMatrix(matrix);

    return 0;
}

#include <iostream>
using namespace std;

class Matrix {
private:
    int data[10];

public:
    Matrix() {
        for (int i = 0; i < 10; i++) {
            data[i] = 0;
        }
    }

    Matrix(int arr[10]) {
        for (int i = 0; i < 10; i++) {
            data[i] = arr[i];
        }
    }

    Matrix operator-(const Matrix& other) {
        Matrix result;
        for (int i = 0; i < 10; i++) {
            result.data[i] = this->data[i] - other.data[i];
        }
        return result;
    }

    Matrix operator*(const Matrix& other) {
        Matrix result;
        for (int i = 0; i < 10; i++) {
            result.data[i] = this->data[i] * other.data[i];
        }
        return result;
    }

    bool operator==(const Matrix& other) {
        for (int i = 0; i < 10; i++) {
            if (this->data[i] != other.data[i]) {
                return false;
            }
        }
        return true;
    }

    void print() const {
        for (int i = 0; i < 10; i++) {
            cout << data[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    int arr1[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int arr2[10] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};

    Matrix m1(arr1);
    Matrix m2(arr2);

    cout << "Matrix 1: ";
    m1.print();

    cout << "Matrix 2: ";
    m2.print();

    Matrix sub = m1 - m2;
    cout << "Subtraction (m1 - m2): ";
    sub.print();

    Matrix mul = m1 * m2;
    cout << "Multiplication (m1 * m2): ";
    mul.print();

    bool equal = (m1 == m2);
    cout << "Are m1 and m2 equal? " << (equal ? "Yes" : "No") << endl;

    return 0;
}
